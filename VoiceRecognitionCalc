import speech_recognition as sr
import re

# Initialize recognizer
recognizer = sr.Recognizer()

def listen_for_command():
    with sr.Microphone() as source:
        print("Adjusting for ambient noise, please wait...")
        recognizer.adjust_for_ambient_noise(source)
        print("Microphone is ready. Please speak your command.")
        
        try:
            # Listening for command with timeout
            audio = recognizer.listen(source, timeout=5, phrase_time_limit=5)
            print("Audio captured, processing...")
            
            # Convert audio to text
            command = recognizer.recognize_google(audio)
            print(f"You said: {command}")
            return command
        except sr.UnknownValueError:
            print("Sorry, I could not understand the audio.")
            return None
        except sr.RequestError as e:
            print(f"Could not request results from Google Speech Recognition service; {e}")
            return None

def parse_expression(command):
    # Replace common spoken phrases with standard operators
    command = command.replace("times", "").replace("x", "").replace("multiplied by", "*")
    command = command.replace("divided by", "/").replace("over", "/")
    
    # Updated regex pattern to match basic arithmetic expressions including multiplication and division
    pattern = r'(\d+)\s*(\+|\-|\|\/)\s(\d+)'
    match = re.search(pattern, command)
    
    if match:
        num1, operator, num2 = match.groups()
        print(f"Parsed expression: {num1} {operator} {num2}")
        return num1, operator, num2
    else:
        print("Could not parse arithmetic expression.")
        return None, None, None

def evaluate_expression(num1, operator, num2):
    try:
        # Construct and evaluate the expression
        expression = f"{num1} {operator} {num2}"
        print(f"Evaluating: {expression}")
        result = eval(expression)
        return result
    except Exception as e:
        print(f"Error evaluating expression: {e}")
        return None

def main():
    command = listen_for_command()
    if command:
        num1, operator, num2 = parse_expression(command)
        if num1 and operator and num2:
            result = evaluate_expression(num1, operator, num2)
            if result is not None:
                print(f"The result of {num1} {operator} {num2} is {result}")
            else:
                print("Could not evaluate the expression.")
        else:
            print("Could not parse the command.")
    else:
        print("No command recognized.")

# Run the main function
main()
